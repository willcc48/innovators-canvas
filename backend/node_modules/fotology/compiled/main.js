(function() {
  var getUrl, request,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require('request');

  getUrl = function(object) {
    return object.url;
  };

  module.exports = function(searchTerm, options, callback) {

    /*
    	To keep it simple, options is not a needed input.
    	That means that it is possible for only 2 inputs to
    	be passed, which would mean that options was the callback,
    	so make the 2nd input the callback and reset options.
     */
    var color, language, possibleColors, ref, safety, searchPrefix, searchUrl, size;
    if ((callback == null) && (options != null) && typeof options === "function") {
      callback = options;
      options = {};
    }
    options.safe = options.safe || "moderate";
    options.size = options.size || "any";
    options.color = options.color || "any";
    options.language = options.language || "en";
    switch (options.safe) {
      case true:
        safety = "active";
        break;
      case false:
        safety = "off";
        break;
      default:
        safety = options.safe;
    }
    switch (options.size) {
      case "small":
        size = "icon";
        break;
      case "medium":
        size = "media";
        break;
      case "large":
        size = "xxlarge";
        break;
      case "huge":
        size = "huge";
        break;
      default:
        size = "any";
    }
    possibleColors = ["black", "blue", "brown", "gray", "green", "orange", "pink", "purple", "red", "teal", "white", "yellow"];
    if (ref = options.color, indexOf.call(possibleColors, ref) >= 0) {
      color = options.color;
    } else {
      "any";
    }
    language = options.language.substring(0, 1).toLowerCase();
    searchPrefix = "https://ajax.googleapis.com/ajax/services/search/images?v=1.0";
    searchUrl = searchPrefix + "&q=" + searchTerm + "&imgsz=" + size + "&safe=" + safety + "&hl=" + language + "&imgcolor=" + color;
    request(searchUrl, function(error, response, body) {
      var error1, images, parsed, urls;
      try {
        parsed = JSON.parse(body);
        images = parsed.responseData.results;
        urls = images.map(getUrl);
        if (urls.length !== 0) {
          return callback(urls);
        }
      } catch (error1) {
        error = error1;
      }
    });
  };

}).call(this);
